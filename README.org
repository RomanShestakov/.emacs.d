#+TITLE:    Emacs customisation installation notes
#+AUTHOR:   Roman Shestakov
#+LANGUAGE: en

* Pre-requisites
This setup was tested with emacs 24.4
These packages needs to be installed before install.
Python mode requires Conda install : http://conda.pydata.org/miniconda.html
** Linux debian
#+BEGIN_SRC bash
# git is needed for megit mode
sudo apt-get install git
# python mode autocomple with jedi requires virtualenv
sudo apt-get install -y python-virtualenv
# install pylint for python mode
sudo pip install pylint
# optionally install ipython as a replacement for python shell in emacs:
sudo pip install ipython
# to run jedi install from inside emacs:
M-x jedi:install-server
#+END_SRC

** MacOs
#+BEGIN_SRC bash
# use homebrew
# install homebrew:
# ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
brew install autoconf
brew install git
# brew install bzr
# emacs depends on texinfo v.5.2
# brew install texinfo
# http://www.linuxfromscratch.org/lfs/view/development/chapter06/texinfo.html
# brew link texinfo --force
# brew info texinfo
# download / manually install mactex
http://www.tug.org/mactex/
# need to install pip and virtualenv for jedi autocompletion to work in python-mode
easy-install pip
pip install virtualenv
pip install ipython
#+END_SRC

* Install
I have  added 'elpa'  dir into a  git repo for  .emacs.d. This  is the
directory when use-package auto-installs  the packages from ELPA. This
is done for convinience  as some of the machines I  use are behind the
firewalls and  can't install all  the packages automatically.   On the
machines which do  have access to un-restricted Internet  it is better
to allow auto-install.  In this case remove  .emacs.d/elpa and restart
emacs.

#+BEGIN_SRC
# Clone from github:
git clone https://github.com/RomanShestakov/.emacs.d.git
# remove ELPA if need to refresh packages from ELPA
rm -rf .emacs.d/elpa
# build distel
make
#+END_SRC

# Environment vars
# set the following vars in .profile
# ERL_TOP
# The path to erlang installation is loaded from env var ERL_TOP so
# this var needs to be set in bash .profile

#+BEGIN_SRC bash
export ERL_TOP=/usr/local/lib/erlang
#+END_SRC

# PYTHONPATH
# PYTHONPATH is used by python-mode, should be setup by .profile
#+BEGIN_SRC bash
export PYTHONPATH=/usr/local/lib/python2.7/site-packages:
#+END_SRC

* Install with Vagrant
## this will load VM repo and install it with Vagrant
#+BEGIN_SRC
git clone https://github.com/RomanShestakov/vm.git
cd vm
vagrant up
vagrant ssh
emacs -nw
## setup jedi
M-x jedi:install-server
start python file.
C-c C-p - start python shell
C-c C-c - eval python buffer
#+END_SRC

* Emacs plug-ins
External packages are installed from MELPA using use-package macro. They are placed in ~/.emacs.d/elpa.
~/.emacs.d/elpa dir is saved into git tree. This is done to improve portability across different systems.
The packages that are installed manually should be placed into ~/.emacs/lisp

* Terminal setting
the color mode requires 256 colors so set in .profile:
export TERM=xterm-256color
* Color theme - gruber-darker-theme
https://github.com/rexim/gruber-darker-theme
* Erlang mode
** YASnippet
Erlang mode relies on .erlang to be present in the root of the
project. To create this file from yasnippet template use the following steps:
- enable YAS - M-x yas-global-mode
- open a new buffer in erlang-mode and type in the word 'erlang', press TAB

** Distel-mode

Distel mode depends on Erlang mode, so need to correct a path to the version of
tools/emacs

Distel mode lives in lisp/distel - it is easier this way when getting via ELPA.
Also it needs to compile erl files before the first run.

#+BEGIN_SRC elisp
cd .emacs.d/lisp/distel
make
#+END_SRC

To use distel mode:

1. start erlang shell : C-c C-z
2. connect distel to it: C-c C-d n
now M-. should work

** Syntax checker for erlang-mode
Erlang mode uses [[https://github.com/ten0s/syntaxerl][syntaxerl]] for erlang syntax checking, which integrates with flymake

#+BEGIN_SRC bash
git clone git://github.com/ten0s/syntaxerl.git
cd syntaxerl
make
#+END_SRC

this will generate syntaxerl file which needs to be added to .emacs.d/bin

** How to start up erlang session with distel
Erlang project should have a .erlang file in the root. See .emacs/snippets/erlang-mode/erlang.
Any .erl file in the project should be evaluated by F9 - this will open a new erlang shell (if not already opened).
Erlang shell will load .erlang from the root of the project and will setup all the required paths to the dependecies.
C-c C-d n - will start Distel session linked to the loaded erlang shell.
After that M-. / M-, binding should work.
* Python mode
I use python.el which is shipped with emacs.
The setup depends on ipython, virtualenv.
Before starting using python mode, jedi mode needs to be initialized.
M-x jedi:install-server

shortcuts:
- C-c C-p - start python shell
- C-c C-c (or F9) - execute buffer
- C-c C-r (or S-F9) - evaluate selected region
- C-c v - virtual env workon

typical session:
start emacs
open .py file
C-c v - select virtualenv
C-c C-p - start python shell inside emacs

** Jedi autocompletion mode for python
jedi requires that pip and virtualenv are installed
easy-install pip
pip install virtualenv
then in emacs:
M-x jedi:install-server

//how to use jedi with conda
http://stackoverflow.com/questions/21703693/can-virtualenv-be-avoided-when-using-emacs-jedi-in-anaconda/21704533#21704533
https://groups.google.com/a/continuum.io/forum/#!topic/anaconda/WLeE62_2crQ

** How to manually build conda packages for jedi integration:
#+BEGIN_SRC
git clone https://github.com/conda/conda-recipes.git
conda install conda-build ipython
conda build conda-recipes/python/jedi
conda build conda-recipes/python/sexpdata
conda build conda-recipes/python/epc
conda install --use-local jedi sexpdata epc
#+END_SRC

** [[http://tuhdo.github.io/helm-projectile.html][Projectile]]
*** Key bindings for projectile
- C-c p p - switch project
- C-c p f - find file in the current project
- C-c p g - grep in files in the project
- C-u C-c p f - invalidate cache
- C-c p C-h - help (show key bindings)
- C-c p k - kill all the buffers for a project
** Virtualevnwrapper
The python mode setup uses [[https://github.com/porterjamesj/virtualenvwrapper.el][virtualenvwrapper
]]Virt-env fuctions are called with M-x. All related functions
have 'venv' prefix:
also some functions are binded to C-c prefix
- venv-mkvirtualenv (C-c v) - create a new env
- venv-workon (C-c v) - switch to new env
- venv-deactive (C-c -d) - switch off env
- venv-rmvirtualenv - delete env
- venv-lsvirtualenv (C-c l) - ls
- venv-cdvirtualenv (C-c c) - change current default dir
** How to setup pyTDDmon
[[http://pytddmon.org/?page_id=79][PyTDDMon.py]] is a nice unit test monitor
it requires installation of TK.
for mac it could be loaded from here
http://www.activestate.com/activetcl/downloads
for Linux Debian could be installed with:
$ sudo apt-get install python-tk
load pytddmon.py from http://pytddmon.org/?page_id=157
drop it into scr dir of the project
and run with python pytddmon.py &
* Ocaml mode
#+BEGIN_SRC
# install opam
brew install opam
opam init
eval `opam config env`
opam install core utop
open install ocp-indent merlin
opam install async yojson core_extended core_bench cohttp async_graphics cryptokit menhir incremental
#+END_SRC

It is a very good idea to use .merlin file for each Ocaml project. This
will make merlin (and correspondingly flycheck-ocaml) error checking work correctly.
Add .merlin file into the root of the project
More about the setup could be found [[https://github.com/the-lambda-church/merlin/wiki/emacs-from-scratch][here]]

#+BEGIN_SRC
#contents of .merlin
PKG core lwt
#+END_SRC
shortcuts:
C-c C-t - check var type
M-Tab - autocomplete
M-. / M-, - follow the var definition / and return back

* Some useful emacs functions
- how to stop ido-mode to auto-complete files during saving:
type in file name, then C-j instead of RET
- If C-h sends delete char, try to use F1 for help-command
- M-r - reverse command search in multiterm mode (same as C-r in bash)
- M-x - describe-personal-key-bindings
- M-x - emacs-uptime - uptime of emacs session
- M-m - back-to-indentation, move to the fist non-whitespace char on the line

* Useful shortcuts
|-------------------------------------------+---------------------------------------------------------------|
| key                                       | description                                                   |
|-------------------------------------------+---------------------------------------------------------------|
| emacs                                     |                                                               |
|-------------------------------------------+---------------------------------------------------------------|
| M-t                                       | find files (helm-for-files)                                   |
| M-q                                       | wrap line if it is too long (fill-paragraph func)             |
| C-u, M-q                                  | wrap line and align text                                      |
| emacs -nw                                 | open emacs in no window mode                                  |
| M-S up/down                               | resize window split                                           |
| M-S left/right                            | resize window split                                           |
| C-c M-b                                   | build ctags for a project                                     |
| C-x C-f C-f                               | get out of ido mode into normal file find: [[http://stackoverflow.com/questions/5138110/emacs-create-new-file-with-ido-enabled][from here]]          |
| C-j in ido                                | accept what was typed - [[http://stackoverflow.com/questions/812524/ido-mode-is-too-smart-can-i-get-it-to-not-complete-a-filename?rq=1][ from here]]                            |
| C-x, r                                    | grep for pattern, rgrep                                       |
| C-x C- + / -                              | change font size                                              |
| C-h b                                     | describe current key bindings                                 |
| C-h k                                     | describe key pressed                                          |
| C-h f                                     | describe function                                             |
| C-h r                                     | run emacs manual                                              |
| C-h v                                     | describe variable                                             |
| M-g M-g                                   | goto line number                                              |
| C-u M-<bar>                               | execute shell command http://irreal.org/blog/?p=354           |
| C-c t                                     | start/switch to multi-term                                    |
| C-c T                                     | always start a new multi-term session                         |
| M-s Up/down                               | move a line up or dow                                         |
| C-x h                                     | select entire buffer                                          |
| C-x C-e                                   | eval s-expression                                             |
| C-M left/right arrow                      | go to the beginning/end of parenthesis                        |
| M-: (read-event "?")                      | read keystrockes                                              |
| C-SPC C-SPC                               | mark a place in a buffer                                      |
| C-u C-SPC                                 | return to the mark                                            |
| M-i                                       | run imenu to show func definitions                            |
| C-x, (                                    | start recording a macro                                       |
| C-x, )                                    | stop recording a macro                                        |
| C-x, e                                    | play a macro                                                  |
| M-BackSpace                               | kill a word on the left                                       |
| M-d                                       | kill a word on the right                                      |
| M-r                                       |                                                               |
| M-1 / M-2                                 | change window                                                 |
|-------------------------------------------+---------------------------------------------------------------|
|                                           |                                                               |
| slime-nav-mode                            |                                                               |
|-------------------------------------------+---------------------------------------------------------------|
| C-c C-d C-d                               | find out value of variable in elisp                           |
| M-.                                       | jump to function def in elisp                                 |
| M-,                                       | jump out                                                      |
| M-x sort-lines                            | sorts selected region                                         |
|-------------------------------------------+---------------------------------------------------------------|
| [[http://orgmode.org/manual/Built_002din-table-editor.html][Org-mode]]                                  |                                                               |
|-------------------------------------------+---------------------------------------------------------------|
| C-C C-e                                   | export mode                                                   |
| C-C C-t                                   | put task into DONE                                            |
| C-C C-o                                   | go to the link origin                                         |
| M-up/down                                 | move line                                                     |
| C-M - down                                | insert line into org table                                    |
| '*'                                       | start a new header                                            |
| '-'                                       | start a bullet list.                                          |
| C-c                                       | cycle thru different bullet styles,                           |
| M-Return                                  | insert a new item                                             |
| M-<Right>/<Left>                          | promote / demote the item                                     |
| C-c VertBar                               | create table                                                  |
| M - <right/left>                          | move column to right/left                                     |
| M - S <right/left/up/down>                | insert column or row (will also remove an column or raw)      |
| C-u M-!                                   | to insert the result of command into a buffer                 |
| cua-mode                                  | breaks region selection                                       |
| < s TAB                                   | insert SRC template                                           |
| C-c C-c                                   | execute python source in org-mode                             |
| C-S <Return>                              | create a new TODO item                                        |
| C-c -                                     | insert horizontal line below                                  |
|-------------------------------------------+---------------------------------------------------------------|
| Python                                    |                                                               |
|-------------------------------------------+---------------------------------------------------------------|
| C-c !                                     | start python interpreter                                      |
| C-c \vert(pipe char) or S-F9              | send active region to interpreter                             |
| C-c C-c  or F9                            | eval entire buffer                                            |
| M-x venv-mkvirtualenv                     | create a new virtualenv                                       |
| C-c C-s                                   | execute python command                                        |
|                                           |                                                               |
|-------------------------------------------+---------------------------------------------------------------|
| vim                                       |                                                               |
|-------------------------------------------+---------------------------------------------------------------|
| esc                                       | enter command mode                                            |
| i                                         | insert mode                                                   |
| Shift:                                    | column mode                                                   |
| wq!                                       | save file and exit                                            |
| yy                                        | yank mode, copy current line                                  |
| p (lowr case)                             | paste the line below the cursor                               |
| P (upper case)                            | paste on the line above the cursor                            |
| o                                         | insert mode , creates a next line                             |
| Shift: =                                  | show the line number we are on                                |
| 23 yy                                     | yank 23 lines below the cursor                                |
| move coursor to the positions and press p | paste 23 lines                                                |
| dd                                        | delete line                                                   |
| 10 dd                                     | delete 10 lines                                               |
| A                                         | takes to the end of the line and enters insert mode           |
| a                                         | moves one char to the right and enters insert mode            |
| R                                         | enter replace insert mode (allows to type over existing text) |
| Shit h (H)                                | jump to the top of the page (Home)                            |
| Shift l(L)                                | jump to the last line                                         |
| u                                         | undo the last change                                          |
| cc                                        | delee contents of the line and override it                    |
| cw                                        | override one word                                             |
| /                                         | search forward                                                |
| ?                                         | search backward                                               |
| n                                         | next occuranse                                                |
| N                                         | occurance before the current one                              |
| esc : %s/word1/word2                      | replace word1 with word2 in entire file (%)                   |
| esc : 1s/word1/word2                      | replace word1 with word2 on line 1                            |
| :w                                        | save file                                                     |
| :wq                                       | save/exit                                                     |
| :q                                        | exit                                                          |
| :q!                                       | exit without saving changes                                   |
| :! <shell command>                        | execute shell command inside vim                              |
| :! ls                                     | show command output inside vim                                |
| :e /filename                              | load file into vim                                            |
| :e /etc/passwd                            | open /etc/passwd file                                         |
| :r /etc/passwd                            | load etc/passwd into current file                             |
|-------------------------------------------+---------------------------------------------------------------|
| Prolog                                    |                                                               |
|-------------------------------------------+---------------------------------------------------------------|
| C-c C-b                                   | eval prolog buffer, conduct buffer                            |
| C-c Enter                                 | run prolog in inferior buffer                                 |
|                                           |                                                               |
|                                           |                                                               |
|-------------------------------------------+---------------------------------------------------------------|
| Tmux                                      | http://www.sitepoint.com/tmux-a-simple-start/                 |
|                                           | [[https://www.youtube.com/watch?v=nD6g-rM5Bh0][Tmux Basics Video]]                                             |
|                                           | [[http://tmuxcheatsheet.com/][Tmux Cheat Sheet]]                                              |
|-------------------------------------------+---------------------------------------------------------------|
| C-b %                                     | split the pane vertically                                     |
| C-b "                                     | split the current pane horizontally                           |
| C-b Arrows                                | to switch the panes                                           |
| C-b z                                     | toggle the pane into full screen mode  (zoom)                 |
| C-b c                                     | add new window                                                |
| C-b <window number>                       | to switch to the given window                                 |
| C-b d                                     | detach tmux session                                           |
| tmux ls                                   | list tmux detached sessions                                   |
| tmux attach -t 0                          | attach to tmux session                                        |
| tmux kill-session -t 0                    | kill session                                                  |
| tmux new -s newsession                    | create new session                                            |
| tmux list-sessions                        | list running sessions                                         |
| C-b ,                                     | rename window                                                 |
| C-b p                                     | switch to prev window                                         |
| C-b n                                     | switch to next window                                         |
| C-b w                                     | list existing windows so it is possible to select window      |
| C-b :                                     | run some named command (e.g. split-window)                    |
| C-b x (or type 'exit')                    | kill pane (remove split)                                      |
| C-b q                                     | show panes numbers                                            |
| C-b &                                     | kill window                                                   |
| C-b ?                                     | show shortcuts                                                |
| C-b (release) arrows                      | move to a panes                                               |
| C-b (hold) arrows                         | resize the panes                                              |
|-------------------------------------------+---------------------------------------------------------------|

* FAQ
** How to check emacs version:
#+BEGIN_SRC
emacs --version
#+END_SRC
M-x emacs-version
* Links to some emacs resources
- [[https://github.com/jhamrick/emacs][Jessica Hamrick emacs setup as Python IDE]]
- [[https://github.com/jwiegley/use-package][Use-package Git repo]]
- [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][Use-package article]]
- [[http://www.lunaryorn.com/archive.html][Sebastian Wiesner (flycheck author) emacs blog]]
- [[https://github.com/jwiegley/dot-emacs][John Wiegley init.el]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html#unnumbered-189][Sacha Chua init file]]
- https://github.com/lunaryorn/.emacs.d/blob/master/init.el
- [[https://www.youtube.com/watch?v=2TSKxxYEbII][John Wiegley explanation for use-package]]
- [[http://www.lunaryorn.com/2014/07/02/autoloads-in-emacs-lisp.html][Autoloads in Emacs Lisp]]
- [[https://martinralbrecht.wordpress.com/2014/11/03/c-development-with-emacs/][C development with Emacs]]
- [[https://www.youtube.com/watch?v=QRBcm6jFJ3Q][Emacs Lisp Development Tips with John Wiegley]]
- [[https://github.com/bbatsov/emacs-lisp-style-guide][The Emacs Lisp Style Guide]]
- [[https://www.youtube.com/watch?v=eH-epEqLVAs][Emacs for Python talk]]
- [[https://www.youtube.com/watch?v=6BlTGPsjGJk][Another talk on how to setup Emacs for python]]
- [[https://github.com/wernerandrew/jedi-starter][Git repo with python jedi setup, used in Emacs Python setup talk]]
- [[http://emacsnyc.org/assets/documents/using-emacs-as-a-python-ide.pdf][PDF slides from Emacs Python setup talk]]
- [[http://wenshanren.org/?p=351][Python debugging with Emacs]]
- [[https://www.masteringemacs.org/article/compiling-running-scripts-emacs][Another python debug setup in Emacs]]
- [[http://batsov.com/articles/2011/11/30/the-ultimate-collection-of-emacs-resources/][Ultimate collection of Emacs resources]]
- [[https://www.youtube.com/watch?v=0cZ7szFuz18][Andrea Crotti - Emacs and shell as your best friends, video]]
- [[https://github.com/AndreaCrotti/Emacs-configuration][Adrea Crotti Emacs config]]
- [[https://www.youtube.com/watch?v=k50zqdXdYxc][TDD in Python with emacs video]]
- [[https://github.com/inducer/pudb][PUDB python debugger]]
- [[https://www.masteringemacs.org/all-articles][Mastering EMACS website - a book and a set of great articles]]
- [[https://github.com/stormogulen/.emacs/blob/master/emacs-config.org][stormogulen/.emacs - setup for Ocalm + some interesting setting for languages]]
- [[http://mads-hartmann.com/ocaml/2014/01/05/using-utop-in-emacs.html][Using Utop for Ocaml in Emacs]]
- [[https://github.com/realworldocaml/book/wiki/Installation-Instructions][Ocaml install for emacs from RealWorldOcaml book]]
- [[https://github.com/the-lambda-church/merlin/wiki/emacs-from-scratch][Ocaml Merlin emacs setup]]
- [[http://mort.io/blog/2013/10/13/21st-century-ide/][A 21st Century IDE - ocaml setup]]
- [[https://realpython.com/blog/python/emacs-the-best-python-editor/][Emacs - the best python editor]]
- [[http://stiglerdiet.com/blog/2015/Nov/24/my-python-environment-workflow-with-conda/][Conda Workflow]]
- [[https://github.com/jorgenschaefer/elpy][ELPY mode]]
- [[http://nsidc.github.io/2015/04/29/Conda%20Python%20at%20NSIDC-%20Changing%20How%20We%20Do%20Python.html][Conda workflow]]
- [[http://stiglerdiet.com/blog/2015/Nov/24/my-python-environment-workflow-with-conda/][Conda workflow 2]]

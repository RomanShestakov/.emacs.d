#+TITLE:    Emacs customisation installation notes
#+AUTHOR:   Roman Shestakov
#+LANGUAGE: en

* Pre-requisites
These packages needs to be installed before install:
** Linux debian
#+BEGIN_SRC bash
#sudo apt-get install texinfo
#sudo apt-get install texlive
#sudo apt-get install bzr
sudo apt-get install git
# python mode autocomple with jedi needs vertualenv
sudo apt-get install -y python-virtualenv
sudo pip install ipython
# run jedi install
# M-x jedi:install-server
#+END_SRC

** MacOs
#+BEGIN_SRC bash
# use homebrew
# install homebrew:
# ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
brew install autoconf
brew install git
# brew install bzr
# emacs depends on texinfo v.5.2
# brew install texinfo
# http://www.linuxfromscratch.org/lfs/view/development/chapter06/texinfo.html
# brew link texinfo --force
# brew info texinfo
# download / manually install mactex
http://www.tug.org/mactex/
# need to install pip and virtualenv for jedi autocompletion to work in python-mode
easy-install pip
pip install virtualenv
pip install ipython
#+END_SRC

* Install
# Clone from github:
git clone https://github.com/RomanShestakov/.emacs.d.git
# build distel
cd .emacs.d/lisp/distel && make

# Environment vars
# set the following vars in .profile
# ERL_TOP
# The path to erlang installation is loaded from env var ERL_TOP so
# this var needs to be set in bash .profile

#+BEGIN_SRC bash
export ERL_TOP=/usr/local/lib/erlang
#+END_SRC

# PYTHONPATH
# PYTHONPATH is used by python-mode, should be setup by .profile
#+BEGIN_SRC bash
export PYTHONPATH=/usr/local/lib/python2.7/site-packages:
#+END_SRC

* Install with Vagrant
## this will load VM repo and install it with Vagrant
#+BEGIN_SRC
git clone https://github.com/RomanShestakov/vm.git
cd vm
vagrant up
vagrant ssh
emacs -nw
## setup jedi
M-x jedi:install-server
start python file.
C-c C-p - start python shell
C-c C-c - eval python buffer
#+END_SRC

* Emacs plug-ins
External packages are installed from MELPA using use-package macro. They are placed in ~/.emacs.d/elpa.
~/.emacs.d/elpa dir is saved into git tree. This is done to improve portability across different systems.
The packages that are installed manually should be placed into ~/.emacs/lisp

* Color theme - gruber-darker-theme
https://github.com/rexim/gruber-darker-theme
* Erlang mode
** Distel-mode

Distel mode depends on Erlang mode, so need to correct a path to the version of
tools/emacs

Distel mode lives in lisp/distel - it is easier this way when getting via ELPA.
Also it needs to compile erl files before the first run.

#+BEGIN_SRC elisp
cd .emacs.d/lisp/distel
make
#+END_SRC

To use distel mode:

1. start erlang shell : C-c C-z
2. connect distel to it: C-c C-d n
now M-. should work

** Syntax checker for erlang-mode
Erlang mode uses [[https://github.com/ten0s/syntaxerl][syntaxerl]] for erlang syntax checking, which integrates with flymake

#+BEGIN_SRC bash
git clone git://github.com/ten0s/syntaxerl.git
cd syntaxerl
make
#+END_SRC

this will generate syntaxerl file which needs to be added to .emacs.d/bin

** How to start up erlang session with distel
Erlang project should have a .erlang file in the root. See .emacs/snippets/erlang-mode/erlang.
Any .erl file in the project should be evaluated by F9 - this will open a new erlang shell (if not already opened).
Erlang shell will load .erlang from the root of the project and will setup all the required paths to the dependecies.
C-c C-d n - will start Distel session linked to the loaded erlang shell.
After that M-. / M-, binding should work.
* Python mode
I use python.el which is shipped with emacs.
The setup depends on ipython, virtualenv.
Before starting using python mode, jedi mode needs to be initialized.
M-x jedi:install-server

shortcuts:
- C-c C-p - start python shell
- C-c C-c (or F9) - execute buffer
- C-c C-r (or S-F9) - evaluate selected region
- C-c v - virtual env workon

typical session:
start emacs
open .py file
C-c v - select virtualenv
C-c C-p - start python shell inside emacs

** Jedi autocompletion mode for python
jedi requires that pip and virtualenv are installed
easy-install pip
pip install virtualenv
then in emacs:
M-x jedi:install-server

** [[http://tuhdo.github.io/helm-projectile.html][Projectile]]
*** Key bindings for projectile
- C-c p p - switch project
- C-c p f - find file in the current project
- C-c p g - grep in files in the project
- C-u C-c p f - invalidate cache
- C-c p C-h - help (show key bindings)
- C-c p k - kill all the buffers for a project
** Virtualevnwrapper
The python mode setup uses [[https://github.com/porterjamesj/virtualenvwrapper.el][virtualenvwrapper
]]Virt-env fuctions are called with M-x. All related functions
have 'venv' prefix:
also some functions are binded to C-c prefix
- venv-mkvirtualenv (C-c v) - create a new env
- venv-workon (C-c v) - switch to new env
- venv-deactive (C-c -d) - switch off env
- venv-rmvirtualenv - delete env
- venv-lsvirtualenv (C-c l) - ls
- venv-cdvirtualenv (C-c c) - change current default dir
** How to setup pyTDDmon
[[http://pytddmon.org/?page_id=79][PyTDDMon.py]] is a nice unit test monitor
it requires installation of TK.
for mac it could be loaded from here
http://www.activestate.com/activetcl/downloads
for Linux Debian could be installed with:
$ sudo apt-get install python-tk
load pytddmon.py from http://pytddmon.org/?page_id=157
drop it into scr dir of the project
and run with python pytddmon.py &
* Some useful emacs functions
- describe-personal-keybindings - allows to see defined keys binding and overrides
- (normal-erase-is-backspace-mode 0) - allows to set emacs into a correct mode for backspace button to work
- If C-h sends delete char, try to use F1 for help-command
- C-c t - opens multiterm mode
- M-r - reverse command search in multiterm mode (same as C-r in bash)
- M-x - describe-personal-key-bindings
- C-h r - invoke emacs manual
- C-SPC C-SPC - mark a place in a buffer
- C-u C-space - return to the mark
- M-x emacs-uptime - uptime of emacs session
- M-m - back-to-indentation, move to the fist non-whitespace char on the line
- C-b / C-f - move back and forward by a char
- M-b / M-f - move back and forward by a word
- M-d - kill a word to the right
- M-Del - kill a word to the left
- C-M b / C-M f - move by S-exp
- C-h a - describe a function
- C-h s - load syntax table
- M-i -  imenu to show func definitions
- C-x r - run rgrep
* Links to some emacs resources
- [[https://github.com/jhamrick/emacs][Jessica Hamrick emacs setup as Python IDE]]
- [[https://github.com/jwiegley/use-package][Use-package Git repo]]
- [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][Use-package article]]
- [[http://www.lunaryorn.com/archive.html][Sebastian Wiesner (flycheck author) emacs blog]]
- [[https://github.com/jwiegley/dot-emacs][John Wiegley init.el]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html#unnumbered-189][Sacha Chua init file]]
- https://github.com/lunaryorn/.emacs.d/blob/master/init.el
- [[https://www.youtube.com/watch?v=2TSKxxYEbII][John Wiegley explanation for use-package]]
- [[http://www.lunaryorn.com/2014/07/02/autoloads-in-emacs-lisp.html][Autoloads in Emacs Lisp]]
- [[https://martinralbrecht.wordpress.com/2014/11/03/c-development-with-emacs/][C development with Emacs]]
- [[https://www.youtube.com/watch?v=QRBcm6jFJ3Q][Emacs Lisp Development Tips with John Wiegley]]
- [[https://github.com/bbatsov/emacs-lisp-style-guide][The Emacs Lisp Style Guide]]
- [[https://www.youtube.com/watch?v=eH-epEqLVAs][Emacs for Python talk]]
- [[https://www.youtube.com/watch?v=6BlTGPsjGJk][Another talk on how to setup Emacs for python]]
- [[https://github.com/wernerandrew/jedi-starter][Git repo with python jedi setup, used in Emacs Python setup talk]]
- [[http://emacsnyc.org/assets/documents/using-emacs-as-a-python-ide.pdf][PDF slides from Emacs Python setup talk]]
- [[http://wenshanren.org/?p=351][Python debugging with Emacs]]
- [[https://www.masteringemacs.org/article/compiling-running-scripts-emacs][Another python debug setup in Emacs]]
- [[http://batsov.com/articles/2011/11/30/the-ultimate-collection-of-emacs-resources/][Ultimate collection of Emacs resources]]
- [[https://www.youtube.com/watch?v=0cZ7szFuz18][Andrea Crotti - Emacs and shell as your best friends, video]]
- [[https://github.com/AndreaCrotti/Emacs-configuration][Adrea Crotti Emacs config]]
- [[https://www.youtube.com/watch?v=k50zqdXdYxc][TDD in Python with emacs video]]
- [[https://github.com/inducer/pudb][PUDB python debugger]]
